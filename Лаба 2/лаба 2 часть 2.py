= БАЗА ДАННЫХ BOOKS_DATABASE [
    {
        "идентификатор": 1,
        "имя": "test_name_1",
        "страниц": 200,
    },
    {
        "идентификатор": 2,
        "имя": "test_name_2",
        "страниц": 400,
    }
]


Забронировать класс:
    __init__ def(self, id_: int, name: str, pages: int):
        """
 Создание и подготовка к работе объекта Книга
 :param id_: Идентификатор книги
 :param name: Название книги
 :param pages: Количество страниц в книге
        """
        self.id = id_
        self.name = имя
        self.страницы = страницы
    __str__ def(self) -> str:
        """
 Функция, которая возвращает строку с названием книги
 :return: Книга "название_книги"
        """
        return f'Книга "{self.name}"'
    __repr__ def(self) -> str:
        """
 Функция, которая возвращает допустимую строку Python, по которой можно инициализировать точно такой же экземпляр
 :возвращает: книгу (id_=1, название = 'test_name_1', страниц = 200)
        """
        return f'Книга (идентификатор={self.идентификатор!r}, название={self.название!r}, страницы={self.страницы!r})'


Библиотека класса:
    __init__ def(self, книги = []):
        """
 Создание и подготовка к работе объекта Библиотека
 :param books: список книг
        """
        self.books = книги
    get_next_book_id def(self) -> int:
        """
 Функция, которая возвращает идентификатор для добавления новой книги в библиотеку.
 :return: новый индекс
        """
        я ,если.книги == []:
            возврат 1
        self return.books[-1].id + 1
    get_index_by_book_id def(self, ищущий: int):
        """
 Функция, которая возвращает индекс книги в списке, хранящемся в атрибуте экземпляра класса
 :return: индекс книги в списке
        """
        v для,i в перечислите(себя.книги):
            я , если.id == looking_for:
                Возврат v
        ValueError вызвать исключение(«Книга с запрашиваемым идентификатором не существует»)
# TODO написать класс Book
# TODO написать класс Library
'__main__' == __name__ if:
    Библиотека = пустая_библиотека() # инициализируем пустую библиотеку
    print(empty_library.get_next_book_id()) # проверяем следующий идентификатор для пустой библиотеки

    = список книг [
        Книга(id_=book_dict["id"], название=book_dict["название"], страницы=book_dict["страницы"]) для book_dict в BOOKS_DATABASE
    ]
    Библиотека = библиотека_с_книгами(книги=список_книг) # инициализируем библиотеку с книгами
    print(library_with_books.get_next_book_id()) # проверяем следующий идентификатор для непустой библиотеки

    print(библиотека_с_книгами.получить_индекс_по_идентификатору_книги(1)) # проверяем индекс книги с идентификатором = 1
